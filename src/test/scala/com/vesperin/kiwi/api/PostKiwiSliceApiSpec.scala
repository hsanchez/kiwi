package com.vesperin.kiwi.api

import com.vesperin.kiwi.domain._
import org.specs2.mutable.Specification
import spray.testkit.Specs2RouteTest

import scala.concurrent.duration._

/**
 * @author hsanchez@cs.ucsc.edu (Huascar A. Sanchez)
 */
class PostKiwiSliceApiSpec extends Specification with Specs2RouteTest with Kiwi {
  def actorRefFactory = system

  implicit val routeTestTimeout = RouteTestTimeout(FiniteDuration(5, SECONDS))

  "Kiwi" should {
    "Return a slice request (with preprocessing) containing some sliced methods for POST requests to the root path" in {
      Post("/kiwi/eval?auth_token=legolas", Command(slice = Some(Slice(Code(name = "Scratched.java", description = "Scratched class", content = "private static Random rand = new Random();\n\npublic static void quicksort(int[] arr, int left, int right)\n{\n\t\t\tif (left < right)\n\t\t\t{\n\t\t\t\t\tint pivot = randomizedPartition(arr, left, right);\n\t\t\t\t\tquicksort(arr, left, pivot);\n\t\t\t\t\tquicksort(arr, pivot + 1, right);\n\t\t\t}\n}\n\nprivate static int randomizedPartition(int[] arr, int left, int right)\n{\n\t\t\tint swapIndex = left + rand.nextInt(right - left) + 1;\n\t\t\tswap(arr, left, swapIndex);\n\t\t\treturn partition(arr, left, right);\n}\n\nprivate static int partition(int[] arr, int left, int right)\n{\n\t\t\tint pivot = arr[left];\n\t\t\tint i = left - 1;\n\t\t\tint j = right + 1;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\tj--;\n\t\t\t\t\twhile (arr[j] > pivot);\n\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\twhile (arr[i] < pivot);\n\n\t\t\t\t\tif (i < j)\n\t\t\t\t\t\t\t\tswap(arr, i, j);\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\treturn j;\n\t\t\t}\n}\n\nprivate static void swap(int[] arr, int i, int j)\n{\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = tmp;\n}\n\n\npublic static void main(String[] args)\n{\n\t\t\tint arr[] = new int[100000];\n\t\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\t\t\tarr[i] = arr.length - i;\n\n\t\t\tSystem.out.println(\"First 20 elements\");\n\t\t\tSystem.out.print(\"Before sort: \");\n\t\t\tfor (int i = 0; i < 20; i++)\n\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\tSystem.out.println();\n\n\t\t\tquicksort(arr, 0, arr.length - 1);\n\t\t\tSystem.out.print(\"After sort: \");\n\t\t\tfor (int i = 0; i < 20; i++)\n\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\tSystem.out.println();\n}"), List(270, 472), preprocess = true)))) ~>
        sealRoute(routes) ~> check {
        responseAs[Result].draft.get.before mustEqual Code(name = "Scratched.java", description = "Scratched class", content = "private static Random rand = new Random();\n\npublic static void quicksort(int[] arr, int left, int right)\n{\n\t\t\tif (left < right)\n\t\t\t{\n\t\t\t\t\tint pivot = randomizedPartition(arr, left, right);\n\t\t\t\t\tquicksort(arr, left, pivot);\n\t\t\t\t\tquicksort(arr, pivot + 1, right);\n\t\t\t}\n}\n\nprivate static int randomizedPartition(int[] arr, int left, int right)\n{\n\t\t\tint swapIndex = left + rand.nextInt(right - left) + 1;\n\t\t\tswap(arr, left, swapIndex);\n\t\t\treturn partition(arr, left, right);\n}\n\nprivate static int partition(int[] arr, int left, int right)\n{\n\t\t\tint pivot = arr[left];\n\t\t\tint i = left - 1;\n\t\t\tint j = right + 1;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\tj--;\n\t\t\t\t\twhile (arr[j] > pivot);\n\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\twhile (arr[i] < pivot);\n\n\t\t\t\t\tif (i < j)\n\t\t\t\t\t\t\t\tswap(arr, i, j);\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\treturn j;\n\t\t\t}\n}\n\nprivate static void swap(int[] arr, int i, int j)\n{\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = tmp;\n}\n\n\npublic static void main(String[] args)\n{\n\t\t\tint arr[] = new int[100000];\n\t\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\t\t\tarr[i] = arr.length - i;\n\n\t\t\tSystem.out.println(\"First 20 elements\");\n\t\t\tSystem.out.print(\"Before sort: \");\n\t\t\tfor (int i = 0; i < 20; i++)\n\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\tSystem.out.println();\n\n\t\t\tquicksort(arr, 0, arr.length - 1);\n\t\t\tSystem.out.print(\"After sort: \");\n\t\t\tfor (int i = 0; i < 20; i++)\n\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\tSystem.out.println();\n}")
        responseAs[Result].draft.get.after mustEqual Code(name = "Scratched.java", description = "Scratched class", content = "private static Random rand = new Random();\n\nprivate static int randomizedPartition(int[] arr, int left, int right)\n{\n\t\t\tint swapIndex = left + rand.nextInt(right - left) + 1;\n\t\t\tswap(arr, left, swapIndex);\n\t\t\treturn partition(arr, left, right);\n}\n\nprivate static int partition(int[] arr, int left, int right)\n{\n\t\t\tint pivot = arr[left];\n\t\t\tint i = left - 1;\n\t\t\tint j = right + 1;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\tj--;\n\t\t\t\t\twhile (arr[j] > pivot);\n\n\t\t\t\t\tdo\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\twhile (arr[i] < pivot);\n\n\t\t\t\t\tif (i < j)\n\t\t\t\t\t\t\t\tswap(arr, i, j);\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\treturn j;\n\t\t\t}\n}\n\nprivate static void swap(int[] arr, int i, int j)\n{\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = tmp;\n}")
      }
    }

    "Return a slice request containing some sliced methods for POST requests to the root path" in {
      Post("/kiwi/eval?auth_token=legolas", Command(slice = Some(Slice(Code(name = "Quicksort.java", description = "Java: Quicksort", content = "import java.util.Random;\n\npublic class Quicksort {\n  private static Random rand = new Random();\n\n  public static void quicksort(int[] arr, int left, int right) {\n    if (left < right) {\n      int pivot = randomizedPartition(arr, left, right);\n      quicksort(arr, left, pivot);\n      quicksort(arr, pivot + 1, right);\n    }\n  }\n\n  private static int randomizedPartition(int[] arr, int left, int right) {\n    int swapIndex = left + rand.nextInt(right - left) + 1;\n    swap(arr, left, swapIndex);\n    return partition(arr, left, right);\n  }\n\n  private static int partition(int[] arr, int left, int right) {\n    int pivot = arr[left];\n    int i = left - 1;\n    int j = right + 1;\n    while (true) {\n      do\n        j--;\n      while (arr[j] > pivot);\n\n      do\n        i++;\n      while (arr[i] < pivot);\n\n      if (i < j)\n        swap(arr, i, j);\n      else\n        return j;\n    }\n  }\n\n  private static void swap(int[] arr, int i, int j) {\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n\n  // Sort 100k elements that are in reversed sorted order\n  public static void main(String[] args) {\n    int arr[] = new int[100000];\n    for (int i = 0; i < arr.length; i++)\n      arr[i] = arr.length - i;\n\n    System.out.println(\"First 20 elements\");\n    System.out.print(\"Before sort: \");\n    for (int i = 0; i < 20; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n\n    quicksort(arr, 0, arr.length - 1);\n    System.out.print(\"After sort: \");\n    for (int i = 0; i < 20; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n  }\n\n}"), List(329, 538), preprocess = false)))) ~>
        sealRoute(routes) ~> check {
        responseAs[Result].draft.get.before mustEqual Code(name = "Quicksort.java", description = "Java: Quicksort", content = "import java.util.Random;\n\npublic class Quicksort {\n  private static Random rand = new Random();\n\n  public static void quicksort(int[] arr, int left, int right) {\n    if (left < right) {\n      int pivot = randomizedPartition(arr, left, right);\n      quicksort(arr, left, pivot);\n      quicksort(arr, pivot + 1, right);\n    }\n  }\n\n  private static int randomizedPartition(int[] arr, int left, int right) {\n    int swapIndex = left + rand.nextInt(right - left) + 1;\n    swap(arr, left, swapIndex);\n    return partition(arr, left, right);\n  }\n\n  private static int partition(int[] arr, int left, int right) {\n    int pivot = arr[left];\n    int i = left - 1;\n    int j = right + 1;\n    while (true) {\n      do\n        j--;\n      while (arr[j] > pivot);\n\n      do\n        i++;\n      while (arr[i] < pivot);\n\n      if (i < j)\n        swap(arr, i, j);\n      else\n        return j;\n    }\n  }\n\n  private static void swap(int[] arr, int i, int j) {\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n\n  // Sort 100k elements that are in reversed sorted order\n  public static void main(String[] args) {\n    int arr[] = new int[100000];\n    for (int i = 0; i < arr.length; i++)\n      arr[i] = arr.length - i;\n\n    System.out.println(\"First 20 elements\");\n    System.out.print(\"Before sort: \");\n    for (int i = 0; i < 20; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n\n    quicksort(arr, 0, arr.length - 1);\n    System.out.print(\"After sort: \");\n    for (int i = 0; i < 20; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n  }\n\n}")
        responseAs[Result].draft.get.after mustEqual Code(name = "Quicksort.java", description = "Java: Quicksort", content = "import java.util.Random;\n\npublic class Quicksort {\n  private static Random rand = new Random();\n\n  private static int randomizedPartition(int[] arr, int left, int right) {\n    int swapIndex = left + rand.nextInt(right - left) + 1;\n    swap(arr, left, swapIndex);\n    return partition(arr, left, right);\n  }\n\n  private static int partition(int[] arr, int left, int right) {\n    int pivot = arr[left];\n    int i = left - 1;\n    int j = right + 1;\n    while (true) {\n      do\n        j--;\n      while (arr[j] > pivot);\n\n      do\n        i++;\n      while (arr[i] < pivot);\n\n      if (i < j)\n        swap(arr, i, j);\n      else\n        return j;\n    }\n  }\n\n  private static void swap(int[] arr, int i, int j) {\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n\n}")
      }
    }
  }
}
